<?php

namespace App\Exceptions;

use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Throwable;
use MarcinOrlowski\ResponseBuilder\ResponseBuilder as RB;
use App\Constants\Payments\ResponseCode;
use Illuminate\Database\QueryException;
use Illuminate\Validation\ValidationException;
use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException;
use Symfony\Component\Translation\Exception\NotFoundResourceException;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that are not reported.
     *
     * @var array
     */
    protected $dontReport = [
        NotifyException::class,
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array
     */
    protected $dontFlash = [
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    public function render($request, Throwable $e)
    {
        if ($e instanceof \PDOException) {
            return RB::error(ResponseCode::DATABASE_FAILED);
        } elseif ($e instanceof ValidationException) {
            return RB::error(ResponseCode::ERROR_PARAMETERS);
        } elseif ($e instanceof MethodNotAllowedHttpException) {
            return RB::error(ResponseCode::HTTP_METHOD_NOT_ALLOWED);
        } elseif ($e instanceof QueryException) {
            return RB::error(ResponseCode::EXCEPTION);
        } elseif ($e instanceof NotFoundResourceException) {
            return RB::error(ResponseCode::RESOURCE_NOT_FOUND);
        }

        return parent::render($request, $e); // TODO: Change the autogenerated stub
    }

    public function report(Throwable $e)
    {
        return parent::report($e); // TODO: Change the autogenerated stub
    }
}
